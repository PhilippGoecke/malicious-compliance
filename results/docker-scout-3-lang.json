{
  "version": "2.1.0",
  "$schema": "https://json.schemastore.org/sarif-2.1.0-rtm.5.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Docker Scout",
          "informationUri": "https://docker.com/products/docker-scout",
          "name": "Scout",
          "rules": [
            {
              "id": "CVE-2023-24534",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Uncontrolled Resource Consumption"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2023-24534",
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.\n  Package        : stdlib 1.19.4  \n  Affected range : \u003c1.19.8        \n  Fixed version  : 1.19.8         \n",
                "markdown": "\u003e HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.\n\n| Package        | stdlib 1.19.4 |\n| Affected range | \u003c1.19.8       |\n| Fixed version  | 1.19.8        |\n"
              },
              "properties": {
                "affected_version": "\u003c1.19.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.19.8",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-24536",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Uncontrolled Resource Consumption"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2023-24536",
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n  Package        : stdlib 1.19.4  \n  Affected range : \u003c1.19.8        \n  Fixed version  : 1.19.8         \n",
                "markdown": "\u003e Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n\n| Package        | stdlib 1.19.4 |\n| Affected range | \u003c1.19.8       |\n| Fixed version  | 1.19.8        |\n"
              },
              "properties": {
                "affected_version": "\u003c1.19.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.19.8",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-24538",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Improper Control of Generation of Code ('Code Injection')"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2023-24538",
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.\n  Package        : stdlib 1.19.4  \n  Affected range : \u003c1.19.8        \n  Fixed version  : 1.19.8         \n",
                "markdown": "\u003e Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.\n\n| Package        | stdlib 1.19.4 |\n| Affected range | \u003c1.19.8       |\n| Fixed version  | 1.19.8        |\n"
              },
              "properties": {
                "affected_version": "\u003c1.19.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.19.8",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2023-418",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests."
              },
              "helpUri": "https://dso.docker.com/cve/GMS-2023-418",
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n  Package        : net 0.3.1-0.20221206200815-1e63c2f08a10  \n  Affected range : \u003c0.7.0                                   \n  Fixed version  : 0.7.0                                    \n",
                "markdown": "\u003e A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n\n| Package        | net                                 |\n|                | 0.3.1-0.20221206200815-1e63c2f08a10 |\n| Affected range | \u003c0.7.0                              |\n| Fixed version  | 0.7.0                               |\n"
              },
              "properties": {
                "affected_version": "\u003c0.7.0",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "0.7.0",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-24532",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Incorrect Calculation"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2023-24532",
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.\n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.7                                       \n  Fixed version  : 1.19.7                                        \n  CVSS Score     : 5.3                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N  \n",
                "markdown": "\u003e The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.\n\n| Package        | stdlib 1.19.4                                |\n| Affected range | \u003c1.19.7                                      |\n| Fixed version  | 1.19.7                                       |\n| CVSS Score     |                                          5.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N |\n"
              },
              "properties": {
                "affected_version": "\u003c1.19.7",
                "cvssV3": 5.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
                "fixed_version": "1.19.7",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-41717",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Allocation of Resources Without Limits or Throttling"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2022-41717",
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n  Package        : net 0.3.1-0.20221206200815-1e63c2f08a10       \n  Affected range : \u003c0.4.0                                        \n  Fixed version  : 0.4.0                                         \n  CVSS Score     : 5.3                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L  \n",
                "markdown": "\u003e An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n\n| Package        | net                                          |\n|                | 0.3.1-0.20221206200815-1e63c2f08a10          |\n| Affected range | \u003c0.4.0                                       |\n| Fixed version  | 0.4.0                                        |\n| CVSS Score     |                                          5.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L |\n"
              },
              "properties": {
                "affected_version": "\u003c0.4.0",
                "cvssV3": 5.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
                "fixed_version": "0.4.0",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-41725",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Uncontrolled Resource Consumption"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2022-41725",
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.\n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.6                                       \n  Fixed version  : 1.19.6                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n",
                "markdown": "\u003e A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.\n\n| Package        | stdlib 1.19.4                                |\n| Affected range | \u003c1.19.6                                      |\n| Fixed version  | 1.19.6                                       |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "\u003c1.19.6",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.19.6",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41724",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Uncontrolled Resource Consumption"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2022-41724",
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).\n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.6                                       \n  Fixed version  : 1.19.6                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n",
                "markdown": "\u003e Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).\n\n| Package        | stdlib 1.19.4                                |\n| Affected range | \u003c1.19.6                                      |\n| Fixed version  | 1.19.6                                       |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "\u003c1.19.6",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.19.6",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24537",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Integer Overflow or Wraparound"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2023-24537",
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.8                                       \n  Fixed version  : 1.19.8                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n",
                "markdown": "\u003e Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n\n| Package        | stdlib 1.19.4                                |\n| Affected range | \u003c1.19.8                                      |\n| Fixed version  | 1.19.8                                       |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "\u003c1.19.8",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.19.8",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41723",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Uncontrolled Resource Consumption"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2022-41723",
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n  Package        : net 0.3.1-0.20221206200815-1e63c2f08a10       \n  Affected range : \u003c0.7.0                                        \n  Fixed version  : 0.7.0                                         \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n",
                "markdown": "\u003e A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n\n| Package        | net                                          |\n|                | 0.3.1-0.20221206200815-1e63c2f08a10          |\n| Affected range | \u003c0.7.0                                       |\n| Fixed version  | 0.7.0                                        |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "\u003c0.7.0",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.7.0",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41722",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
              },
              "helpUri": "https://dso.docker.com/cve/CVE-2022-41722",
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".\n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.6                                       \n  Fixed version  : 1.19.6                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N  \n",
                "markdown": "\u003e A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".\n\n| Package        | stdlib 1.19.4                                |\n| Affected range | \u003c1.19.6                                      |\n| Fixed version  | 1.19.6                                       |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N |\n"
              },
              "properties": {
                "affected_version": "\u003c1.19.6",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                "fixed_version": "1.19.6",
                "tags": [
                  "HIGH"
                ]
              }
            }
          ],
          "version": "v0.6.0"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2023-24534",
          "ruleIndex": 0,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : CVE-2023-24534  \n  Severity       : UNSPECIFIED     \n  Package        : stdlib 1.19.4   \n  Affected range : \u003c1.19.8         \n  Fixed version  : 1.19.8          \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536",
          "ruleIndex": 1,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : CVE-2023-24536  \n  Severity       : UNSPECIFIED     \n  Package        : stdlib 1.19.4   \n  Affected range : \u003c1.19.8         \n  Fixed version  : 1.19.8          \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538",
          "ruleIndex": 2,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : CVE-2023-24538  \n  Severity       : UNSPECIFIED     \n  Package        : stdlib 1.19.4   \n  Affected range : \u003c1.19.8         \n  Fixed version  : 1.19.8          \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "GMS-2023-418",
          "ruleIndex": 3,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2023-418                             \n  Severity       : UNSPECIFIED                              \n  Package        : net 0.3.1-0.20221206200815-1e63c2f08a10  \n  Affected range : \u003c0.7.0                                   \n  Fixed version  : 0.7.0                                    \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "net",
                  "fullyQualifiedName": "pkg:golang/golang.org/x/net@0.3.1-0.20221206200815-1e63c2f08a10",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532",
          "ruleIndex": 4,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability  : CVE-2023-24532                                \n  Severity       : MEDIUM                                        \n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.7                                       \n  Fixed version  : 1.19.7                                        \n  CVSS Score     : 5.3                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N  \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717",
          "ruleIndex": 5,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability  : CVE-2022-41717                                \n  Severity       : MEDIUM                                        \n  Package        : net 0.3.1-0.20221206200815-1e63c2f08a10       \n  Affected range : \u003c0.4.0                                        \n  Fixed version  : 0.4.0                                         \n  CVSS Score     : 5.3                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L  \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "net",
                  "fullyQualifiedName": "pkg:golang/golang.org/x/net@0.3.1-0.20221206200815-1e63c2f08a10",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725",
          "ruleIndex": 6,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : CVE-2022-41725                                \n  Severity       : HIGH                                          \n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.6                                       \n  Fixed version  : 1.19.6                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724",
          "ruleIndex": 7,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : CVE-2022-41724                                \n  Severity       : HIGH                                          \n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.6                                       \n  Fixed version  : 1.19.6                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : CVE-2023-24537                                \n  Severity       : HIGH                                          \n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.8                                       \n  Fixed version  : 1.19.8                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723",
          "ruleIndex": 9,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : CVE-2022-41723                                \n  Severity       : HIGH                                          \n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.6                                       \n  Fixed version  : 1.19.6                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722",
          "ruleIndex": 10,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : CVE-2022-41722                                \n  Severity       : HIGH                                          \n  Package        : stdlib 1.19.4                                 \n  Affected range : \u003c1.19.6                                       \n  Fixed version  : 1.19.6                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N  \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "stdlib",
                  "fullyQualifiedName": "pkg:golang/stdlib@1.19.4",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723",
          "ruleIndex": 9,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : CVE-2022-41723                                \n  Severity       : HIGH                                          \n  Package        : net 0.3.1-0.20221206200815-1e63c2f08a10       \n  Affected range : \u003c0.7.0                                        \n  Fixed version  : 0.7.0                                         \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n"
          },
          "locations": [
            {
              "logicalLocations": [
                {
                  "name": "net",
                  "fullyQualifiedName": "pkg:golang/golang.org/x/net@0.3.1-0.20221206200815-1e63c2f08a10",
                  "kind": "golang"
                },
                {
                  "fullyQualifiedName": "/bin/kubectl"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
